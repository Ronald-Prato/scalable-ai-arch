{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///home/mcka_ron/Documents/develop/scalable-ia/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\n// PrismaClient is attached to the `global` object in development to prevent\n// exhausting your database connection limit.\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma = globalForPrisma.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,4EAA4E;AAC5E,6CAA6C;AAC7C,MAAM,kBAAkB;AAEjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///home/mcka_ron/Documents/develop/scalable-ia/src/app/api/summary/route.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { NextResponse } from \"next/server\";\nimport OpenAI from \"openai\";\nimport { Client } from \"@upstash/qstash\";\nimport prisma from \"~/lib/prisma\";\n\n// Initialize QStash client\nconst qstashClient = new Client({\n  token: process.env.QSTASH_TOKEN || \"\",\n});\n\nexport async function POST(request: Request) {\n  try {\n    // Parse the request body\n    const body = await request.json();\n    const { text, saveToDatabase = false, summary = null } = body;\n\n    // If we already have a summary (from the save button), use it directly\n    let aiResponse = summary;\n\n    // If we don't have a summary, generate one with OpenAI\n    if (!aiResponse) {\n      // Initialize OpenAI client with API key from environment variable\n      const openai = new OpenAI({\n        apiKey: process.env.OPENAI_API_KEY,\n      });\n\n      const promptTranca = `\n          Necesito que hagas un resumen de la siguiente entrada:\n          ${text}\n\n          Sigue la siguiente estructura:\n          Resumen: \n          [resumen]\n\n          Puntos clave:\n          [puntos clave]\n\n\n          Formato html, usa negritas, cursivas, listas, etc para que el resumen sea más legible.\n          estiliza el texto con inner css para que los título (resumen y puntos clave) sean más visibles.\n        `;\n\n      const promptHardcore = `\n          Necesito que hagas un resumen de la siguiente entrada:\n          ${text}\n\n          Sigue la siguiente estructura:\n          Resumen: \n          [resumen]\n\n          Puntos clave:\n          [puntos clave]\n\n          Análisis:\n          [necesito que hagas un análisis de la entrada, que vaya desde sentimientos de quien lo escribe hasta un desgloce completo\n          en qué sirve esta información para entenderla psicología del autor, el resumen debe ser extenso y detallado]\n\n          Formato html, usa negritas, cursivas, listas, etc para que el resumen sea más legible.\n        `;\n\n      // Call OpenAI API\n      const chatCompletion = await openai.chat.completions.create({\n        messages: [\n          {\n            role: \"system\",\n            content:\n              \"Eres un asistente experto en hacer resúmenes detallados pero cortos.\",\n          },\n          { role: \"user\", content: promptTranca },\n        ],\n        model: \"gpt-3.5-turbo\",\n      });\n\n      // Get the response from OpenAI\n      aiResponse = chatCompletion.choices[0].message.content;\n    }\n\n    let summaryId = null;\n\n    // Only store the summary in the database if explicitly requested\n    if (saveToDatabase) {\n      const savedSummary = await prisma.summary.create({\n        data: {\n          text,\n          summary: aiResponse || \"\",\n        },\n      });\n      summaryId = savedSummary.id;\n    }\n\n    // Return the response\n    return NextResponse.json({\n      message: aiResponse,\n      summaryId,\n      saved: saveToDatabase,\n    });\n  } catch (error) {\n    console.error(\"API Error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to process OpenAI request\" },\n      { status: 500 }\n    );\n  }\n}\n\n// New endpoint for QStash test message\nexport async function PUT(request: Request) {\n  try {\n    const body = await request.json();\n    const { message, destination } = body;\n\n    if (!message || !destination) {\n      return NextResponse.json(\n        { error: \"Message and destination are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if destination is a localhost URL\n    const isLocalhost =\n      destination.includes(\"localhost\") ||\n      destination.includes(\"127.0.0.1\") ||\n      destination.includes(\"::1\");\n\n    // Use ngrok tunnel for local development\n    const ngrokUrl = \"https://eaa8-201-244-238-219.ngrok-free.app\";\n\n    if (isLocalhost) {\n      // For local development, use ngrok tunnel instead of localhost\n      console.log(\"Using ngrok tunnel for local development\");\n\n      // Replace localhost URL with ngrok URL\n      const ngrokDestination = destination.replace(\n        /https?:\\/\\/(localhost|127\\.0\\.0\\.1|\\:\\:1)(:\\d+)?/,\n        ngrokUrl\n      );\n\n      console.log(\"Redirecting to ngrok tunnel:\", ngrokDestination);\n\n      // Send a real message to QStash using the ngrok URL\n      const response = await qstashClient.publishJSON({\n        url: `${ngrokUrl}/api/webhook`,\n        body: {\n          message: message,\n          timestamp: new Date().toISOString(),\n          originalDestination: destination,\n        },\n      });\n\n      return NextResponse.json({\n        success: true,\n        messageId: response.messageId,\n        message: \"Message sent to local backend via ngrok tunnel\",\n        ngrokUrl: ngrokUrl,\n      });\n    }\n\n    // For production, send a real message to QStash\n    const response = await qstashClient.publishJSON({\n      url: destination,\n      body: {\n        message: message,\n        timestamp: new Date().toISOString(),\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      messageId: response.messageId,\n      message: \"Message queued successfully\",\n    });\n  } catch (error) {\n    console.error(\"QStash Error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to send message to QStash\", details: String(error) },\n      { status: 500 }\n    );\n  }\n}\n\n// Add a new GET endpoint to retrieve summaries\nexport async function GET(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get(\"id\");\n\n    if (id) {\n      // Get a specific summary\n      const summary = await prisma.summary.findUnique({\n        where: { id },\n      });\n\n      if (!summary) {\n        return NextResponse.json(\n          { error: \"Summary not found\" },\n          { status: 404 }\n        );\n      }\n\n      return NextResponse.json(summary);\n    } else {\n      // Get all summaries\n      const summaries = await prisma.summary.findMany({\n        orderBy: { createdAt: \"desc\" },\n      });\n\n      return NextResponse.json(summaries);\n    }\n  } catch (error) {\n    console.error(\"Database Error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to retrieve summaries\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Add a DELETE endpoint to remove a summary\nexport async function DELETE(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get(\"id\");\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Summary ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Delete the summary\n    await prisma.summary.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: \"Summary deleted successfully\",\n    });\n  } catch (error) {\n    console.error(\"Database Error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to delete summary\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"AAAA,oDAAoD;;;;;;AACpD;AACA;AACA;AAAA;AACA;;;;;AAEA,2BAA2B;AAC3B,MAAM,eAAe,IAAI,4NAAA,CAAA,SAAM,CAAC;IAC9B,OAAO,QAAQ,GAAG,CAAC,YAAY,IAAI;AACrC;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,yBAAyB;QACzB,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,iBAAiB,KAAK,EAAE,UAAU,IAAI,EAAE,GAAG;QAEzD,uEAAuE;QACvE,IAAI,aAAa;QAEjB,uDAAuD;QACvD,IAAI,CAAC,YAAY;YACf,kEAAkE;YAClE,MAAM,SAAS,IAAI,sMAAA,CAAA,UAAM,CAAC;gBACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc;YACpC;YAEA,MAAM,eAAe,CAAC;;UAElB,EAAE,KAAK;;;;;;;;;;;;QAYT,CAAC;YAEH,MAAM,iBAAiB,CAAC;;UAEpB,EAAE,KAAK;;;;;;;;;;;;;;QAcT,CAAC;YAEH,kBAAkB;YAClB,MAAM,iBAAiB,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;gBAC1D,UAAU;oBACR;wBACE,MAAM;wBACN,SACE;oBACJ;oBACA;wBAAE,MAAM;wBAAQ,SAAS;oBAAa;iBACvC;gBACD,OAAO;YACT;YAEA,+BAA+B;YAC/B,aAAa,eAAe,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO;QACxD;QAEA,IAAI,YAAY;QAEhB,iEAAiE;QACjE,IAAI,gBAAgB;YAClB,MAAM,eAAe,MAAM,sHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,MAAM,CAAC;gBAC/C,MAAM;oBACJ;oBACA,SAAS,cAAc;gBACzB;YACF;YACA,YAAY,aAAa,EAAE;QAC7B;QAEA,sBAAsB;QACtB,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA,OAAO;QACT;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAmC,GAC5C;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG;QAEjC,IAAI,CAAC,WAAW,CAAC,aAAa;YAC5B,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,0CAA0C;QAC1C,MAAM,cACJ,YAAY,QAAQ,CAAC,gBACrB,YAAY,QAAQ,CAAC,gBACrB,YAAY,QAAQ,CAAC;QAEvB,yCAAyC;QACzC,MAAM,WAAW;QAEjB,IAAI,aAAa;YACf,+DAA+D;YAC/D,QAAQ,GAAG,CAAC;YAEZ,uCAAuC;YACvC,MAAM,mBAAmB,YAAY,OAAO,CAC1C,oDACA;YAGF,QAAQ,GAAG,CAAC,gCAAgC;YAE5C,oDAAoD;YACpD,MAAM,WAAW,MAAM,aAAa,WAAW,CAAC;gBAC9C,KAAK,GAAG,SAAS,YAAY,CAAC;gBAC9B,MAAM;oBACJ,SAAS;oBACT,WAAW,IAAI,OAAO,WAAW;oBACjC,qBAAqB;gBACvB;YACF;YAEA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,WAAW,SAAS,SAAS;gBAC7B,SAAS;gBACT,UAAU;YACZ;QACF;QAEA,gDAAgD;QAChD,MAAM,WAAW,MAAM,aAAa,WAAW,CAAC;YAC9C,KAAK;YACL,MAAM;gBACJ,SAAS;gBACT,WAAW,IAAI,OAAO,WAAW;YACnC;QACF;QAEA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,WAAW,SAAS,SAAS;YAC7B,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAoC,SAAS,OAAO;QAAO,GACpE;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,KAAK,aAAa,GAAG,CAAC;QAE5B,IAAI,IAAI;YACN,yBAAyB;YACzB,MAAM,UAAU,MAAM,sHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,CAAC;gBAC9C,OAAO;oBAAE;gBAAG;YACd;YAEA,IAAI,CAAC,SAAS;gBACZ,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAoB,GAC7B;oBAAE,QAAQ;gBAAI;YAElB;YAEA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAC3B,OAAO;YACL,oBAAoB;YACpB,MAAM,YAAY,MAAM,sHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;gBAC9C,SAAS;oBAAE,WAAW;gBAAO;YAC/B;YAEA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAC3B;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA+B,GACxC;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,OAAO,OAAgB;IAC3C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,KAAK,aAAa,GAAG,CAAC;QAE5B,IAAI,CAAC,IAAI;YACP,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,MAAM,sHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAC1B,OAAO;gBAAE;YAAG;QACd;QAEA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}