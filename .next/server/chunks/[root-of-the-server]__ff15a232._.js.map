{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///home/mcka_ron/Documents/develop/scalable-ia/src/app/api/site-generation/route.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { NextResponse } from \"next/server\";\nimport OpenAI from \"openai\";\nimport prisma from \"~/lib/prisma\";\n\nexport async function POST(request: Request) {\n  try {\n    // Parse the request body\n    const body = await request.json();\n    const { text } = body;\n\n    if (!text) {\n      return NextResponse.json({ error: \"Text is required\" }, { status: 400 });\n    }\n\n    // Initialize OpenAI client with API key from environment variable\n    const openai = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY,\n    });\n\n    const promptTranca = `\n      Necesito que hagas un resumen de la siguiente entrada:\n      ${text}\n\n      Sigue la siguiente estructura:\n      Resumen:\n      [resumen]\n\n      Puntos clave:\n      [puntos clave]\n\n      Formato html, usa negritas, cursivas, listas, etc para que el resumen sea más legible.\n      estiliza el texto con inner css para que los título (resumen y puntos clave) sean más visibles.\n    `;\n\n    // Call OpenAI API\n    const chatCompletion = await openai.chat.completions.create({\n      messages: [\n        {\n          role: \"system\",\n          content:\n            \"Eres un asistente experto en hacer resúmenes detallados pero cortos.\",\n        },\n        { role: \"user\", content: promptTranca },\n      ],\n      model: \"gpt-3.5-turbo\",\n    });\n\n    // Get the response from OpenAI\n    const aiResponse = chatCompletion.choices[0].message.content;\n\n    // Return the response\n    return NextResponse.json({\n      message: \"Summary generated successfully\",\n      summary: aiResponse,\n    });\n  } catch (error) {\n    console.error(\"API Error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to generate summary\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"AAAA,oDAAoD;;;AACpD;AACA;;;AAGO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,yBAAyB;QACzB,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,GAAG;QAEjB,IAAI,CAAC,MAAM;YACT,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,kEAAkE;QAClE,MAAM,SAAS,IAAI,sMAAA,CAAA,UAAM,CAAC;YACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc;QACpC;QAEA,MAAM,eAAe,CAAC;;MAEpB,EAAE,KAAK;;;;;;;;;;;IAWT,CAAC;QAED,kBAAkB;QAClB,MAAM,iBAAiB,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YAC1D,UAAU;gBACR;oBACE,MAAM;oBACN,SACE;gBACJ;gBACA;oBAAE,MAAM;oBAAQ,SAAS;gBAAa;aACvC;YACD,OAAO;QACT;QAEA,+BAA+B;QAC/B,MAAM,aAAa,eAAe,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO;QAE5D,sBAAsB;QACtB,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}