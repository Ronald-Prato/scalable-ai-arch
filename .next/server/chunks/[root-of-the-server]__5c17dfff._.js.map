{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///home/mcka_ron/Documents/develop/scalable-ia/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\n// PrismaClient is attached to the `global` object in development to prevent\n// exhausting your database connection limit.\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma = globalForPrisma.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,4EAA4E;AAC5E,6CAA6C;AAC7C,MAAM,kBAAkB;AAEjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///home/mcka_ron/Documents/develop/scalable-ia/src/app/api/summary/route.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { NextResponse } from \"next/server\";\nimport OpenAI from \"openai\";\nimport { Client } from \"@upstash/qstash\";\nimport prisma from \"~/lib/prisma\";\n\n// Initialize QStash client\nconst qstashClient = new Client({\n  token: process.env.QSTASH_TOKEN || \"\",\n});\n\nexport async function POST(request: Request) {\n  try {\n    // Parse the request body\n    const body = await request.json();\n    const { text, summary = null } = body;\n\n    let summaryId = null;\n\n    // New logic: Always save to database with empty summary field\n    const savedSummary = await prisma.summary.create({\n      data: {\n        text,\n        summary: \"\", // Empty summary field\n        status: \"PENDING\",\n      },\n    });\n    summaryId = savedSummary.id;\n\n    // Send a message to QStash with the summary ID\n    try {\n      // Get the app URL from environment variables or use a default\n      const appUrl = process.env.NEXT_PUBLIC_APP_URL || \"\";\n\n      // Use ngrok tunnel for local development\n      const ngrokUrl = \"https://eaa8-201-244-238-219.ngrok-free.app\";\n\n      // Check if destination is a localhost URL\n      const destinationUrl = `http://localhost:3001/api/process-summary`;\n      const isLocalhost =\n        destinationUrl.includes(\"localhost\") ||\n        destinationUrl.includes(\"127.0.0.1\") ||\n        destinationUrl.includes(\"::1\");\n\n      let qstashDestination = destinationUrl;\n\n      if (isLocalhost) {\n        // For local development, use ngrok tunnel instead of localhost\n        console.log(\"Using ngrok tunnel for local development\");\n\n        // Replace localhost URL with ngrok URL\n        qstashDestination = destinationUrl.replace(\n          /https?:\\/\\/(localhost|127\\.0\\.0\\.1|\\:\\:1)(:\\d+)?/,\n          ngrokUrl\n        );\n\n        console.log(\"Redirecting to ngrok tunnel:\", qstashDestination);\n      }\n\n      // Send a message to QStash to process the summary asynchronously\n      const qstashResponse = await qstashClient.publishJSON({\n        url: qstashDestination,\n        body: {\n          summaryId: summaryId,\n          text: text,\n        },\n      });\n\n      console.log(\"QStash message sent:\", qstashResponse.messageId);\n    } catch (qstashError) {\n      console.error(\"QStash Error:\", qstashError);\n      // Continue execution even if QStash fails\n    }\n\n    // Return the response\n    return NextResponse.json({\n      message: \"Summary queued for processing\",\n      summaryId,\n      saved: true,\n    });\n  } catch (error) {\n    console.error(\"API Error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to process summary request\" },\n      { status: 500 }\n    );\n  }\n}\n\n// New endpoint for QStash test message\nexport async function PUT(request: Request) {\n  try {\n    const body = await request.json();\n    const { message, destination } = body;\n\n    if (!message || !destination) {\n      return NextResponse.json(\n        { error: \"Message and destination are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if destination is a localhost URL\n    const isLocalhost =\n      destination.includes(\"localhost\") ||\n      destination.includes(\"127.0.0.1\") ||\n      destination.includes(\"::1\");\n\n    // Use ngrok tunnel for local development\n    const ngrokUrl = \"https://eaa8-201-244-238-219.ngrok-free.app\";\n\n    if (isLocalhost) {\n      // For local development, use ngrok tunnel instead of localhost\n      console.log(\"Using ngrok tunnel for local development\");\n\n      // Replace localhost URL with ngrok URL\n      const ngrokDestination = destination.replace(\n        /https?:\\/\\/(localhost|127\\.0\\.0\\.1|\\:\\:1)(:\\d+)?/,\n        ngrokUrl\n      );\n\n      console.log(\"Redirecting to ngrok tunnel:\", ngrokDestination);\n\n      // Send a real message to QStash using the ngrok URL\n      const response = await qstashClient.publishJSON({\n        url: `${ngrokUrl}/api/webhook`,\n        body: {\n          message: message,\n          timestamp: new Date().toISOString(),\n          originalDestination: destination,\n        },\n      });\n\n      return NextResponse.json({\n        success: true,\n        messageId: response.messageId,\n        message: \"Message sent to local backend via ngrok tunnel\",\n        ngrokUrl: ngrokUrl,\n      });\n    }\n\n    // For production, send a real message to QStash\n    const response = await qstashClient.publishJSON({\n      url: destination,\n      body: {\n        message: message,\n        timestamp: new Date().toISOString(),\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      messageId: response.messageId,\n      message: \"Message queued successfully\",\n    });\n  } catch (error) {\n    console.error(\"QStash Error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to send message to QStash\", details: String(error) },\n      { status: 500 }\n    );\n  }\n}\n\n// Add a new GET endpoint to retrieve summaries\nexport async function GET(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get(\"id\");\n\n    if (id) {\n      // Get a specific summary\n      const summary = await prisma.summary.findUnique({\n        where: { id },\n      });\n\n      if (!summary) {\n        return NextResponse.json(\n          { error: \"Summary not found\" },\n          { status: 404 }\n        );\n      }\n\n      return NextResponse.json(summary);\n    } else {\n      // Get all summaries\n      const summaries = await prisma.summary.findMany({\n        orderBy: { createdAt: \"desc\" },\n      });\n\n      return NextResponse.json(summaries);\n    }\n  } catch (error) {\n    console.error(\"Database Error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to retrieve summaries\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Add a DELETE endpoint to remove a summary\nexport async function DELETE(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get(\"id\");\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Summary ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Delete the summary\n    await prisma.summary.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: \"Summary deleted successfully\",\n    });\n  } catch (error) {\n    console.error(\"Database Error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to delete summary\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}